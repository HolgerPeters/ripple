#!/usr/bin/env ruby

trap("INT") {exit}
trap("TERM") {exit}

$:.unshift File.join(File.dirname(__FILE__), *%w[.. lib])

help = <<HELP
Ripple is a lilypond generator.

Basic Command Line Usage:
  ripple                                                    # . -> .
  ripple <path to work  >                                   # . -> <path>

  Configuration is read from '<source>/<work>/_work.yml' but can be overriden
  using the following options:

HELP

require 'optparse'
require 'ripple'
require 'pp'

exec = {}
$options = {}
opts = OptionParser.new do |opts|
  opts.banner = help

  opts.on("-p", "--parts PART", "Parts (comma-separated)") do |v|
    $options["selected_parts"] = v
  end
  
  opts.on("-m", "--mvts MVT", "Movements (comma-separated)") do |v|
    $options["selected_movements"] = v
  end
  
  opts.on("--no-score", "Do not generate secore") do
    $options["no_score"] = true
  end
  
  opts.on("-M", "--midi", "Generate midi file") do
    $options["midi"] = true
    $options["score_only"] = true # implied
  end
  
  opts.on("--no-midi", "Disable midi file generation") do
    $options["midi"] = false
  end
  
  opts.on("--opt OPT", "Option override (key:value,key:value)") do |v|
    v.split(",").each do |kv|
      if kv =~ /(.+):(.+)/ 
        $options[$1] = $2
      else
        puts "Invalid option specified, please use key:value format"
        exit
      end
    end
  end
  
  opts.on("--no-pdf", "Generate Lilypond file only") do
    $options["no_pdf"] = true
  end
  
  opts.on("-s", "--score", "Generate only score, no parts") do
    $options["score_only"] = true
  end
  
  opts.on("-V", "--vocal", "Generate only vocal score") do
    $options["vocal_only"] = true
  end
  
  opts.on("-o", "--open", "Open PDF/Midi file after processing") do
    $options["open_target"] = true
  end

  opts.on("--no-open", "Open PDF/Midi file after processing") do
    $options["open_target"] = false
  end

  opts.on("-v", "--version", "Display current version") do
    puts "Ripple " + Ripple.version
    exit 0
  end
  
  opts.on("-a", "--auto", "Force auto mode") do
    $options["auto"] = true
  end
  
  opts.on("--no-auto", "Disable auto mode") do
    $options["auto"] = false
  end
  
  opts.on("-P", "--proof", "Proof-reading mode") do
    $options["proof"] = true
    $options["auto"] = true
    $options["open_target"] = true
    $options["open_in_background"] = true
  end

  opts.on("-c", "--compile", "Compilation mode") do
    $options["compile"] = true
  end
  
  opts.on("-C", "--fast-compile", "Ad-hoc compilation mode") do
    $options["fast-compile"] = true
  end
  
  opts.on("-t", "--title TITLE", "Title") do |v|
    $options["title"] = v
  end
  
  opts.on("-b", "--booklet", "Create booklet PDF's") do
    $options["make_booklet"] = true
  end
  
  opts.on("-W", "--work", "Create new work") do
    $options["gen"] = :work
  end
end

opts.parse!

if $options["gen"]
  Ripple.generate($options["gen"], ARGV)
  exit
end

# Get source and destintation from command line
case ARGV.size
when 0
  $works = nil
  if $options["proof"] && !File.exists?('_work.yml')
    puts "Work must be specified in proof mode."
    exit(1)
  end
  if File.file?('_work.yml')
    $works = ['.']
  end
when 1
  file = ARGV[0]
  if (file !~ /\.yml$/) and File.file?(file + ".yml")
    file += ".yml"
  end
  $works = [file]
  if !$options["fast-compile"] && File.file?(file)
    if file =~ /compilation/ || ((y = YAML.load(file) rescue {}) && (y["compilation"]))
      $options["compile"] = true
    end
  end
else
  if $options["fast-compile"]
    $options["fast-compile"] = ARGV
  else
    $works = ARGV
  end
end

$config = Ripple.configuration($options)
$works ||= Ripple.works($config)

def process(opts = {})
  if $options["fast-compile"]
    Ripple::Compilation.new(nil, $config).process
  elsif $works.empty?
    puts "No music found."
  else
    $works.each do |w|
      if $config["compile"]
        Ripple::Compilation.new(w, $config.merge(opts)).process
      else
        Ripple::Work.new(w, $config.merge(opts)).process
      end
    end
  end
rescue RippleError => e
  puts e.message
  exit unless $options["auto"]
end

# Files to watch
def globs(source)
  Dir.chdir(source) do
    if $works
      dirs = $works.map {|w| Dir[w]}
    else
      dirs = Dir['*'].select { |x| File.directory?(x) }
      # exclude _ly, _pdf, _midi dirs
      ['ly_dir', 'pdf_dir', 'midi_dir'].map {|d| $config[d]}.each do |d|
        if d =~ /^\.\/(.*)/
          dirs -= [$1]
        end
      end
    end
    
    dirs = dirs.map { |x| "#{x}/**/*" }
    dirs += ['*']
  end
end

def proof_options(path)
  part = File.basename(path, '.*')
  # check if the file belongs to a keyboard part (e.g. organo.r.rpl)
  if part =~ /^(.*)\.\d$/
    part = $1
  end
  dir = File.dirname(path)
  if dir =~ /^\.\/(.+)$/
    dir = $1
  end
  if dir =~ /^#{$works.first}\/([^\/]+)/
    mvt = $1
  else
    mvt = nil
  end
  if $options['score_only']
    {"selected_movements" => mvt}
  else
    {"selected_parts" => part, "selected_movements" => mvt}
  end
end

$last_proof_path = nil

def make_proof_score(midi = false)
  return unless $last_proof_path
  opts = proof_options($last_proof_path)
  opts["selected_parts"] = nil
  opts["score_only"] = true
  opts["midi"] = midi
  process(opts)
end

def proof_interrupt
  trap("INT") {exit}
  puts "Proof mode interrupted. (S)core, (M)IDI or e(x)it?"
  if i = STDIN.gets
    case i.chomp.downcase
    when 's': make_proof_score(false)
    when 'm': make_proof_score(true)
    when 'x': exit
    end
  end
  trap("INT") {proof_interrupt}
end

if $options["auto"]
  require 'directory_watcher'
  if $config['proof']
    puts "Proof mode: #{$config['source']} -> #{$config['pdf_dir']}"
  else
    puts "Auto-regeneration: #{$config['source']} -> #{$config['pdf_dir']}"
  end

  dw = DirectoryWatcher.new($config['source'])
  dw.interval = 1
  dw.glob = globs($config['source'])
  
  if $config['proof']
    dw.reset(true)
    trap("INT") {proof_interrupt}
    dw.add_observer do |*args|
      t = Time.now.strftime("%Y-%m-%d %H:%M:%S")
      args.each do |e|
        if e.type = :modified
          puts "[#{t}] Changed: #{e.path}"
          $last_proof_path = e.path unless File.extname(e.path) == '.yml'
          process(proof_options($last_proof_path)) if $last_proof_path
        end
      end
    end
  else
    dw.add_observer do |*args|
      t = Time.now.strftime("%Y-%m-%d %H:%M:%S")
      puts "[#{t}] regeneration: #{args.size} files changed"
      process
    end
  end
  
  dw.start
  loop {sleep 1000}
  dw.stop

else
  # just process once
  process
end
