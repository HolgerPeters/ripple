#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), *%w[.. lib])

help = <<HELP
Ripple is a lilypond generator.

Basic Command Line Usage:
  ripple                                                    # . -> .
  ripple <path to work  >                                   # . -> <path>

  Configuration is read from '<source>/<work>/_work.yml' but can be overriden
  using the following options:

HELP

require 'optparse'
require 'ripple'

exec = {}
options = {}
opts = OptionParser.new do |opts|
  opts.banner = help

  opts.on("-p", "--parts PART", "Parts (comma-separated)") do |v|
    options["selected_parts"] = v
    options["no_score"] = true
  end
  
  opts.on("-m", "--mvts MVT", "Movements (comma-separated)") do |v|
    options["selected_movements"] = v
  end
  
  opts.on("-o", "--option OPT", "Option override (key:value)") do |v|
    if v =~ /(.+):(.+)/
      options[$1] = $2
    else
      puts "Invalid option specified, please use key:value format"
      exit
    end
  end
  
  opts.on("--no-pdf", "Generate Lilypond file only") do
    options["no_pdf"] = true
  end
  
  opts.on("--score", "Generate only score, no parts") do
    options["score_only"] = true
  end
  
  opts.on("--no-score", "Generate only parts, no score") do
    options["no_score"] = true
  end
  
  opts.on("--open", "Open PDF file after processing") do
    options["open_pdf"] = true
  end

  opts.on("--version", "Display current version") do
    puts "Ripple " + Ripple.version
    exit 0
  end
end

opts.parse!

# Get source and destintation from command line
case ARGV.size
  when 0
    work = nil
  when 1
    work = ARGV[0]
  else
    puts "Invalid options. Run `ripple --help` for assistance."
    exit(1)
end

config = Ripple.configuration(options)
works = Ripple.works(config)
if work
  Ripple::Work.new(work, config).process
elsif works.empty?
  puts "No music found."
else
  works.each {|w| w.process}
end
